#!/usr/bin/env node

/*!
 * Jody
 * Copyright(c) Garren Smith <garrens@drivensoftware.net>
 * (MIT Licensed)
 */

/**
*/

process.env.NODE_ENV='test' // set test environment

var version = '0.2.0beta4';


var spec = require('../lib/Jody.js'),
    runner = require('../lib/runner.js'),
    matchers = require('../lib/matchers.js'),
    reporter = require('../lib/reporter.js'),
    path = require('path'),
    fs = require('fs'),
    args = process.argv.slice(2),
    files = [],
    spec_helper_loaded = false,
    fileWatching = false;

var help = ''
+ 'Usage: Jody [options] <file ...>'
+ '\n'
+ '\nOptions:'
+ '\n  -d, --dir            Run specs in directory'
+ '\n  -w, --watch          Watch ./specs for changes and run'
+ '\n  -v, --version        Output version number'
+ '\n  -h, --help           Display help information'
+ '\n'
+ '\n If no file given, will look in ./specs for specs to run';


while (args.length) {
  var arg = args.shift();
  switch(arg) {
    case '-h':
    case '--help':
      console.log(help + '\n');
      process.exit(0);
      break;

    case '-v':
    case '--version':
      console.log(version);
      process.exit(0);
      break;
    case '-d':
    case '--dir':
      loadFiles(args.shift());
      break
    case '-w':
    case '--watch':
        fileWatching = true;
        watchForChanges();
        break;
    default:
        if (/\.js$/.test(arg)) {
          files.push(arg);
          if (arg === 'spec_helper.js') {
            spec_helper_loaded = true;
          }
        }
        break;
  }
}

function loadFiles(dir) {
  try {
    fs.readdirSync(dir).map(function(file){
      if (/\.js$/.test(file)) {
        files.push(dir + '/' + file); 
      }

    });
  } catch (err) {
    console.log('\n  failed to load specs in ./spec\n');
    process.exit(1);
  }
  console.log('files ' + files);
}

function spawn_jody(file) {
   var jody = spawn('Jody',[file]);
  jody.stdout.on('data', function (data) {
    console.log(data.toString());
  });

  jody.stderr.on('data', function (data) {
    console.log(data.toString());
  });

  jody.on('exit', function (code) {
  });

};

function watchForChanges() {
  console.log("Watching files");
  spawn = require('child_process').spawn;

  fs.readdirSync('./specs').forEach(function (file) {
    if (!(/\.js$/.test(file))) {
      return;
    }
    console.log("watching " + file);

    fs.watchFile('./specs/' +file,{ persistent: true, interval: 1000 }, function (curr, prev) {
      /*console.log("before ");
      console.dir(prev);
      console.log(" after ");
      console.dir(curr);*/
      if (curr.mtime !== prev.mtime) {
        console.log(file + " has been changed. Running tests...");
        spawn_jody('./specs/' + file);
     }
    });
  });
  //spawn_jody();
};


if (fileWatching == false) {
  if (files.length === 0 ) {
    loadFiles('specs');
  }


  files.forEach (function (file) {
    file = path.join(process.cwd(), file);
    require(file);
    console.log("executing " + file);
  });

  if (!spec_helper_loaded) {
    try {
      require(process.cwd() + '/specs/spec_helper.js');
    } catch (e) { }
  }

  var specRunner = new runner.Runner();

  specRunner.on('done', function () {
    reporter.displayResults();
    if (reporter.failedSpecs) {
      process.exit(1);
    }
    process.exit(0);

  });

  specRunner.on('beforeAllDone', function () {
    specRunner.run(spec.specs);
  });

  specRunner.beforeAllSpecs();
}

// vim:ft=javascript
