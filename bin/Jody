#!/usr/bin/env node

/*!
 * Jody
 * Copyright(c) Garren Smith <garrens@drivensoftware.net>
 * (MIT Licensed)
 */

/**
*/

process.env.NODE_ENV='test' // set test environment

var version = '0.2.5';


var async = require('async'),
    Jody = require('../lib/Jody.js'),
    runner = require('../lib/runner.js'),
    matchers = require('../lib/matchers.js'),
    reporter = require('../lib/reporter.js'),
    path = require('path'),
    fs = require('fs'),
    args = process.argv.slice(2),
    files = [];

var help = ''
+ 'Usage: Jody [options] <file ...>'
+ '\n'
+ '\nOptions:'
+ '\n  -d, --dir            Run specs in directory'
+ '\n  -w, --watch          Watch ./specs for changes and run'
+ '\n  -v, --version        Output version number'
+ '\n  -h, --help           Display help information'
+ '\n'
+ '\n If no file given, will look in ./specs for specs to run';

/*
   process.on('uncaughtException', function (err) {
   console.log('Caught exception: ');
   if (typeof err === 'object') {
   if (err.message) {
   console.log('\nMessage: ' + err.message)
   }
   if (err.stack) {
   console.log('\nStacktrace:')
   console.log('====================')
   console.log (err.stack);
   }

   if (err.error) {
//console.dir(err);
}
} else {
console.log('dumpError :: argument is not an object');
}});
*/

while (args.length) {
  var arg = args.shift();
  switch(arg) {
    case '-h':
    case '--help':
      console.log(help + '\n');
      process.exit(0);
      break;

    case '-v':
    case '--version':
      console.log(version);
      process.exit(0);
      break;
    case '-d':
    case '--dir':
      loadFiles(args.shift());
      break
    case '-w':
    case '--watch':
        fileWatching = true;
        watchForChanges();
        break;
    default:
        if (/\.js$/.test(arg)) {
          files.push(arg);
        }
        break;
  }
}

function load_helper(done) {
  try {
    require(process.cwd() + '/specs/spec_helper.js');
  } catch (e) {
    console.log("error in spec helper");
    console.dir(e);
    //process.exit(1);
  }

  done();
}

function loadFiles(dir) {
    try {
      fs.readdirSync(dir).map(function(file){
        if (/\.js$/.test(file)) {
          if (file === 'spec_helper.js') {
            //console.log("spec helper found");
            return
          }

          files.push(dir + '/' + file); 
        }

      });
    } catch (err) {
      console.dir(err);
      console.log('\n  failed to load specs in ./spec\n');
      process.exit(1);
    }
    console.log('files ' + files);
  }


function load_files(done) {

  
  if (files.length === 0 ) {
    loadFiles('specs');
  }

  files.forEach (function (file) {
    file = path.join(process.cwd(), file);
    require(file);
    console.log("executing " + file);
  });
  
  done();

}



function run_it(done) {
  var specRunner = new runner.Runner();

  specRunner.run(Jody.specification_groups);
  done();
}

async.series([load_helper,load_files,run_it]);



process.on('exit', function () {
  reporter.displayResults();
});

/*specRunner.on('done', function () {
  reporter.displayResults();
  if (reporter.failedSpecs) {
  console.log("done fired");
  process.exit(1);
  }
  console.log("done fired");

  process.exit(0);

  });*/



// vim:ft=javascript
